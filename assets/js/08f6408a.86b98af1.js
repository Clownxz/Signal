"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[538],{49164:e=>{e.exports=JSON.parse('{"functions":[{"name":"connect","desc":"Creates a Connection with a Signal. When the Signal is fired with `Signal:fire(...)`, the Connection will run the supplied function.","params":[{"name":"callback","desc":"","lua_type":"(T...) -> nil"}],"returns":[{"desc":"","lua_type":"Connection"}],"function_type":"method","source":{"line":48,"path":"lib/init.lua"}},{"name":"connectParallel","desc":"Creates a Connection with a Signal. When the Signal is fired with `Signal:fire(...: T...)`, the Connection will run the supplied function in a desyncronized state.\\n\\n:::note\\nThe Script calling this Method must be rooted under an [**Actor**](https://create.roblox.com/docs/reference/engine/classes/Actor).","params":[{"name":"callback","desc":"","lua_type":"(...: T...) -> nil"}],"returns":[{"desc":"","lua_type":"Connection"}],"function_type":"method","source":{"line":68,"path":"lib/init.lua"}},{"name":"disconnectAll","desc":"Disconnects all the Connections associated with the Signal. ","params":[],"returns":[{"desc":"","lua_type":"void"}],"function_type":"method","source":{"line":87,"path":"lib/init.lua"}},{"name":"fire","desc":"Fires the Signal, calling all Connections with the supplied parameters.","params":[{"name":"...","desc":"","lua_type":"...T"}],"returns":[{"desc":"","lua_type":"void"}],"function_type":"method","source":{"line":107,"path":"lib/init.lua"}},{"name":"once","desc":"Connects to the Signal once, runs the provided callback after the Signal is fired one time.","params":[{"name":"callback","desc":"","lua_type":"(...: T...) -> nil"}],"returns":[{"desc":"","lua_type":"Connection"}],"function_type":"method","source":{"line":130,"path":"lib/init.lua"}},{"name":"wait","desc":"Yields the current thread until the Signal is fired upon with `Signal:fire(...)`, returning the parameters given in the `fire` method.\\n\\n```lua\\n\\t-- Yields the thread until the Signal is fired upon.\\n\\tlocal param1, param2... = mySignal:wait()\\n```","params":[],"returns":[{"desc":"","lua_type":"...any"}],"function_type":"method","yields":true,"source":{"line":156,"path":"lib/init.lua"}},{"name":"new","desc":"Creates a new Signal Instance and returns it.","params":[],"returns":[{"desc":"","lua_type":"Signal"}],"function_type":"static","source":{"line":184,"path":"lib/init.lua"}}],"properties":[{"name":"_connections","desc":"An internal table of Connection Instances.\\n\\t","lua_type":"table","tags":["Internal Use Only"],"private":true,"source":{"line":196,"path":"lib/init.lua"}},{"name":"_threadPool","desc":"A ThreadPool for recycling threads.\\n    ","lua_type":"ThreadPool","tags":["Internal Use Only"],"private":true,"source":{"line":206,"path":"lib/init.lua"}}],"types":[],"name":"Signal","desc":"A typed implementation of Roblox\'s RBXScriptSignal based on Stravant\'s Goodsignal, designed to replicate the behavior of [`RBXScriptSignal`](https://create.roblox.com/docs/reference/engine/datatypes/RBXScriptSignal).\\n\\n**Usage**\\n\\n```lua\\n\\tlocal Signal = require(path.to.module)\\n\\t\\n\\tlocal mySignal = Signal.new()\\n\\tmySignal:connect(function(...)\\n\\t\\tprint(...)\\n\\tend)\\n\\t\\n\\tmySignal:fire(\\"Hello, world!\\")\\n\\t-- Prints \\"Hello, world!\\"\\"\\n```","source":{"line":35,"path":"lib/init.lua"}}')}}]);