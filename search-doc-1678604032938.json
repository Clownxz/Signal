[{"title":"Connection","type":0,"sectionRef":"#","url":"/Signal/api/Connection","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"Connection","url":"/Signal/api/Connection#functions","content":" "},{"title":"new​","type":1,"pageTitle":"Connection","url":"/Signal/api/Connection#new","content":"&lt;/&gt; Connection.new(callback: (T...) → nil) → Connection   "},{"title":"disconnect​","type":1,"pageTitle":"Connection","url":"/Signal/api/Connection#disconnect","content":"&lt;/&gt; Connection:disconnect() → nil  "},{"title":"ThreadPool","type":0,"sectionRef":"#","url":"/Signal/api/ThreadPool","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"ThreadPool","url":"/Signal/api/ThreadPool#functions","content":" "},{"title":"new​","type":1,"pageTitle":"ThreadPool","url":"/Signal/api/ThreadPool#new","content":"&lt;/&gt; ThreadPool.new( threadCount: number?, cachedThreadLifetime: number? ) → ThreadPool Creates a new ThreadPool Instance. note You can specify the amount of threads the ThreadPool will keep open by setting the threadCount parameter. You can also specify the max time the Thread will be cached for by setting the cachedThreadLifetime parameter. Setting this parameter to 0 will disable caching.  "},{"title":"spawn​","type":1,"pageTitle":"ThreadPool","url":"/Signal/api/ThreadPool#spawn","content":"&lt;/&gt; ThreadPool:spawn( callback: (...: any) → nil, ...: any ) → void Runs the provided function on a new or reused thread with the supplied parameters. "},{"title":"Signal","type":0,"sectionRef":"#","url":"/Signal/api/Signal","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"Signal","url":"/Signal/api/Signal#functions","content":" "},{"title":"new​","type":1,"pageTitle":"Signal","url":"/Signal/api/Signal#new","content":"&lt;/&gt; Signal.new() → Signal Creates a new Signal Instance and returns it.  "},{"title":"connect​","type":1,"pageTitle":"Signal","url":"/Signal/api/Signal#connect","content":"&lt;/&gt; Signal:connect(callback: (T...) → nil) → Connection Creates a Connection with a Signal. When the Signal is fired with Signal:fire(...), the Connection will run the supplied function.  "},{"title":"connectParallel​","type":1,"pageTitle":"Signal","url":"/Signal/api/Signal#connectParallel","content":"&lt;/&gt; Signal:connectParallel(callback: (...: T...) → nil) → Connection Creates a Connection with a Signal. When the Signal is fired with Signal:fire(...: T...), the Connection will run the supplied function in a desyncronized state. note The Script calling this Method must be rooted under an Actor.  "},{"title":"disconnectAll​","type":1,"pageTitle":"Signal","url":"/Signal/api/Signal#disconnectAll","content":"&lt;/&gt; Signal:disconnectAll() → void Disconnects all the Connections associated with the Signal.  "},{"title":"fire​","type":1,"pageTitle":"Signal","url":"/Signal/api/Signal#fire","content":"&lt;/&gt; Signal:fire(...: ...T) → void Fires the Signal, calling all Connections with the supplied parameters.  "},{"title":"once​","type":1,"pageTitle":"Signal","url":"/Signal/api/Signal#once","content":"&lt;/&gt; Signal:once(callback: (...: T...) → nil) → Connection Connects to the Signal once, runs the provided callback after the Signal is fired one time.  "},{"title":"wait​","type":1,"pageTitle":"Signal","url":"/Signal/api/Signal#wait","content":"This is a yielding function. When called, it will pause the Lua thread that called the function until a result is ready to be returned, without interrupting other scripts. Yields &lt;/&gt; Signal:wait() → ...any Yields the current thread until the Signal is fired upon with Signal:fire(...), returning the parameters given in the fire method. -- Yields the thread until the Signal is fired upon. local param1, param2... = mySignal:wait()  "}]